1  Быстрый старт с Postman

1.1 Что такое Postman?

Основное назначение Postman - облегчить разработку, тестирование и документирование API. С его помощью можно отправить данные в запросе и проверить полученный ответ.
Также у него есть много других интересных возможностей. Можно например сохранять запросы в папки и коллекции, удобно параметризовывать запросы. Запускать коллекции с
помощью Collection Runner и использовать их как автоматизированные тесты. Postman позволяет проектировать дизайн API и создавать на его основе Mock-сервер.

Тестировщики, с помощью Postman могут отправлять HTTP/HTTPS запросы к сервисам и получать ответы от них. С помощью такого подхода можно протестировать бэкенд сервисы и
убедиться, что они работают корректно. С помощью Postman можно выполнять запросы к различным API, таким как REST, SOAP и GraphQL.

Postman - это сейчас достаточно популярный инструмент, который использует в работе много людей. У него есть большое сообщество, в котором в случае необходимости можно
будет найти ответы на появившиеся вопросы.

1.2 Установка

Для установки под Windows:  

  - Загрузите последнюю версию Postman.
  - Запустите .exe файл для установки.
  - После окончания процесса установки потребуется зарегистрироваться. Для простоты можно выбрать вариант регистрации с помощью существующего google аккаунта.

Также у Postman есть web версия, которая работает прямо в браузере. Она доступна по этой ссылке. На данный момент эта версия находится в процессе доработок, поэтому
часть возможностей настольной версии там недоступна

1.3 Основные элементы интерфейса Postman

Окно приложения состоит из верхнего, нижнего  и бокового меню, а также основной зоны работы.

Верхнее меню дает возможность создания рабочего пространства (Workspaces) и доступа к различным api (API Network). Также с его помощью можно делать поиск.
Home - содержит вашу домашнюю страницу. На ней можно посмотреть вашу недавнюю активность.
С помощью Workspaces - можно создать новое рабочее пространство, выбрать одно из недавно посещенных, либо сделать поиск по существующим.

В боковом меню доступны основные функциональные элементы Postman. В истории (History) вы можете увидеть сделанные ранее запросы. Для более удобного хранения, группировки и поиска таких запросов в Postman есть коллекции (Collections). Если у вас небольшой экран, для удобной работы можно свернуть боковое меню с помощью кнопки в нижнем левом углу.

Большая часть вашей работы в Postman будет проходить в основной рабочей зоне. Основные её части - вкладки, выпадающий список для выбора окружения и правое боковое меню. Вкладки нам нужны, для лучшей организации работы с запросами. Здесь Postman сделан по тому же принципу, что и браузеры, где новую странице удобнее открывать в новой вкладке

1.4 Ручное тестирование api с Postman. Отправка первого запроса

Основная функциональность Postman - возможность создания и отправки запросов к API для проверки его функциональности и получения данных. Для этого не потребуется
писать код или команды в терминале. В интерфейсе Postman вы создаете запрос, нажимаете кнопку отправить и получаете ответ от API. API расшифровывается как Application
Programming Interface или программный интерфейс приложения. С его помощью мы можем  получить доступ к возможностям другого приложения и обмениваться с ним данными.
Такое приложение называется API сервером. Отправка запросов и получение ответов происходит через интернет с помощью протокола HTTP. Приложение, которое отправляет
запрос, называется клиентом. Это может быть мобильное приложение, web сайт или другой сервис.

Запрос всегда содержит URL вызываемого эндпоинта API и HTTP метод запроса. Наиболее часто используются следующие методы:

POST - для добавления новых данных
GET - для чтения данных
PUT - для обновления данных
PATCH - для частичного обновления данных
DELETE - для удаления данных

Как будет выглядеть GET запрос из демонстрационного API Postman:  GET https://postman-echo.com/get

Для отправки в Postman выбираем метод GET. Копируем адрес нашего эндпоинта и нажимаем кнопку Send. В результате получаем ответ содержащий данные в виде json объекта.

В ответе мы можем увидеть тело ответа (Body), который мы получили от сервера. Postman автоматически распознает формат JSON и форматирует его, для лучшего восприятия.
Помимо Body, мы можем посмотреть куки (Cookies) и заголовки (Headers) ответа, нажав на соответствующие ссылки. Также мы видим, что наш запрос выполнился успешно и в
ответе мы получили код ответа 200 OK. На выполнение запроса ушло 148мс



2  Работа с запросами и ответами в Postman

2.1 Основные запросы

Запрос может содержать различную информацию, которая определяет какие данные Postman отправит при взаимодействии с API. Обязательно нужно указать метод запроса и его
URL. С их помощью определяется API эндпоинт, с которым Postman будет взаимодействовать. Для начала давайте попробуем отправить пять основных типов запросов.

Создадим новый запрос, для этого можно в верхнем меню выбрать New > HTTP Request, либо нажать + и создать новую вкладку.

GET запрос. Обычно такой тип запросов используется для чтения данных.

GET https://postman-echo.com/get

Метод GET у нас уже выбран по умолчанию. Осталось указать URL нашего API. После того, как мы начнем вводить его, Postman в выпадающем списке покажет нам ранее введенные адреса. В данном примере наш url состоит из двух частей. 

Первая из них базовый(base) url - это https://postman-echo.com. Она состоит из протокола https. Здесь чаще всего будет использоваться либо https, либо http протокол.
Затем идёт host, представленный доменным именем postman-echo.com. Вместо него также может быть использован ip адрес хоста. И затем идет неявно указанный порт, в нашем
случае это 443. Если используется протокол http, порт по умолчанию будет 80. Если порт отличается от используемых по умолчанию, потребуется явно указать его через
двоеточие. 

Вторая часть это путь(path) запроса. Он находится сразу после base url.

После ввода URL мы можем отправить запрос. Для этого нужно нажать кнопку Send. Через некоторое время после этого в нижней части главного окна мы увидим ответ от сервера

Запрос с path параметрами

Это параметры которые являются частью пути запроса. В документации к api такие параметры часто задаются в фигурных скобках. В Postman для добавления такого параметра в запрос, нужно указать двоеточие перед его именем.

GET https://postman-echo.com/delay/:delay

После этого на вкладке Params, в таблице path параметров можно будет задать его значение

POST запрос с query параметрами

POST запрос. Такой тип запросов обычно используется чтобы добавить данные.

POST https://postman-echo.com/post?name=anna

Для его отправки надо выбрать соответствующий тип в выпадающем списке, слева от url адреса. Еще в отличии от предыдущего, этот запрос содержит параметры строки запроса
или query параметры. От основной части url они отделяются знаком вопроса, а между собой знаком амперсанда.

Если ввести такой параметр в строке запроса, он автоматически появится на вкладке Params. Если добавить его на вкладке, тогда он появится в строке запроса. Еще на этой
вкладке у каждого параметра есть поле description. В нем можно добавить описание к каждому из указанных параметров. Для краткости столбцы value и description можно
скрыть. Для этого нужно нажать кнопку View more actions и выбрать только нужные поля. 

Есть еще один способ ввода параметров - Bulk Edit. Он удобен, если вам требуется указать большое количество параметров. Для его использования нужно нажать
соответствующую кнопку. В открывшемся окне можно вводить параметры. Каждый параметр вводится в новой строке. Имя и значение параметра разделяются двоеточием. Например
ранее введенный нами параметр будет выглядеть таким образом: name:anna

2.2 Передача параметров в теле запроса

Иногда в запросе может потребоваться отправить больший объем данных чем пара ключ и значение. Например вы хотите добавить нового пользователя. Информация о нем
представлена в виде XML или Json. Будет не очень удобно передавать ее в виде path или query параметров. Для таких случаев используется передача параметров в теле
запроса. Обычно такой способ применяется с POST, PUT и PATCH запросами.

В Postman, на вкладке body вы можете задать нужные данные, которые будут отправлены вместе с запросом. Там же можно выбрать тип отправляемых данных. По умолчанию
Postman для тела запроса использует тип none.

Если вы планируете отправлять данные в теле запроса необходимо убедиться, что добавлен правильный заголовок content-type. Он нужен для того, чтобы api мог корректно
обработать полученный запрос.

Для типов form-data и x-www-form-urlencoded Postman автоматически добавит в заголовки нужный content-type. Если вы планируете использовать тип raw, Postman добавит
заголовок на основе выбранного вами типа (например json или text). Для типа binary Postman не будет добавлять никаких заголовков. Заданный вручную заголовок content
type переопределяет значение, указанное Postman

Форматы form-data, url-encoded и binary

Формат form-data. Он позволяет отправлять данные в формате пар ключ-значение. Используемый content-type, который Postman сам добавит в заголовки:
multipart/form-data, к которому динамически добавляется граница(boundary) генерируемая во время отправки запроса. Такой тип передачи данных часто используется при
отправки данных формы на сайтах. Еще с помощью формата form-data можно передавать файлы. Для этого в выпадающем меню нужно выбрать file и загрузить нужный нажав на
кнопку Select Files.

Формат x-www-form-urlencoded внешне очень похож на form-data. Здесь данные также передаются в формате ключ-значение, но отсутствует возможность передавать файлы.
Заголовок content-type, который Postman добавит автоматически будет иметь значение: application/x-www-form-urlencoded.

Формат binary. Он предназначен для отправки бинарных данных. Обычно к ним относятся различные файлы: картинки, аудио, видео и также текстовые файлы. Такие данные
тяжело вручную добавить в запрос, поэтому в Postman это делается с помощью диалога загрузки файла

PUT запрос и raw формат

PUT запрос. Такой тип запросов обычно используется для обновления данных.

PUT https://postman-echo.com/put

В теле запроса можно передавать текстовые данные, различных форматов. Для этого используется вариант передачи данных: raw. В выпадающем меню можно выбрать формат
передаваемых данных. Доступные форматы: Text, JavaScript, JSON, HTML и XML. 

Для данных в формате JSON и XML появляется кнопка Beautify. С ее помощью можно переформатировать текстовые данные для красивого отображения в окне ввода

PATCH запрос

PATCH запросы обычно используются для частичного обновления данных.

PATCH https://postman-echo.com/patch

Снова выберем вкладку raw. В зависимости от выбранного формата, Postman включит подсветку синтаксиса в окне ввода и добавит нужный заголовок content-type. Он будет
иметь следующие значения:

Text - text/plain
JavaScript - application/javascript
JSON - application/json
HTML - text/html
XML - application/xml

При необходимости вы сможете переопределить его на вкладке headers

DELETE запрос

DELETE запрос. Такой тип запросов как правило используется для удаления данных.

DELETE https://postman-echo.com/delete

Для его отправки надо выбрать соответствующий тип в выпадающем списке, слева от url адреса.

На вкладке Headers при необходимости можно добавить заголовки запроса. Сейчас там находится 8 заголовков, которые Postman добавил в запрос автоматически

2.3 Работа с ответами

В Postman есть возможность визуализации тела ответа, а также проверки его корректности. Основные части ответа - это код ответа, заголовки и тело ответа


Тело ответа

В Postman тело ответа мы можем посмотреть в нижней части главного экрана, на вкладке body. Она предоставляет несколько инструментов, которые помогут эффективнее
работать с ответами от api. Это 4 вида представления тела ответа: Pretty, Raw, Preview и Visualize. В первых двух доступна функция поиска в запросе. Для открытия окна
поиска нужно будет выбрать иконку поиска или нажать сочетание клавиш ⌘+F или Ctrl+F. В Postman доступен автоматический показ изображений в теле ответа, если он
содержит соответствующий заголовок content-type.

Форматированный(Pretty) вид - представление тела запроса для форматов JSON и XML. Этот вид автоматически форматирует полученный ответ для более легкого восприятия. Применяется удобная подсветка различных частей текста.

Postman делает форматирование автоматически, на основе пришедшего заголовка content-type. Для принудительного изменения форматирования, можно воспользоваться выпадающим списком для выбора иного формата, рядом с кнопкой Visualize.

Если вы работаете только с форматом Json, можно выставить принудительное форматирование в этом формате. Для этого в верхнем меню нужно выбрать раздел настроек (Settings). На вкладке General найти настройку определения языка (Language detection). Затем поменять ее значение с Auto на Json.

Неформатированный (Raw) вид - текстовое представление тела запроса, без дополнительного форматирования. Позволяет просмотреть его в полученном виде.

Предпросмотр (Preview) - этот вид позволяет удобно просматривать полученное содержимое в обработанном виде. Это может быть удобно например в случае получения стандартных ошибок, которые приходят в виде Html страницы.

Для бинарных типов данных в ответах, таких как аудио файлы, pdf документы, zip архивы или что-то другое вы можете воспользоваться кнопкой Send and download, чтобы сохранить ответ и проверить его локально на своем компьютере.

Визуализация (Visualize) - позволяет обработать полученный ответ собственным способом. Код для визуализации добавляется отдельно.


Заголовки и cookies

На вкладке Cookies можно просмотреть все куки отправленные сервером. Каждая запись будет содержать имя, значение, домен и путь, а также дополнительную информацию.

На вкладке headers отображается информация о полученных заголовках, в формате ключ-значение. Если навести мышку на иконку информации, в поле с именем заголовка, можно получить информацию о каждом из них, в соответствии со спецификацией протокола HTTP.

В случае отправки HEAD запроса, Postman откроет вкладку Headers по умолчанию, вместо вкладки Body.

Результаты тестов (Test results) расположенны на вкладке с таким же названием.


Информация об ответе

Postman также отображает сетевую информацию при получении запроса. Наведите мышку на иконку глобуса рядом со статус кодом.

Далее идет код ответа, который вернул API. Наведите курсор на сам код для получения описания того, что он означает.

Затем следует время и размер ответа. Postman автоматически посчитает время ответа от сервера в миллисекундах. Эта информация может быть полезна, при анализе причин слишком долгих ответов. При наведении курсора на число, отображается разбиение этого времени по различным фазам ответа.

Далее Postman отображает примерный размер ответа. При наведении на число можно увидеть размер тела запроса и заголовков.

Еще в Postman есть функция сохранения ответов от сервера. Если запрос был сохранен в коллекцию, вы также можете сохранить и ответ для него. Для этого выберите Save
Response, затем Save as example. Либо сохраните ответ в файл, выбрав Save to a file



3 Коллекции и переменные в Postman

3.1 Создание коллекции и добавление запросов

В Postman вы можете группировать запросы и примеры ответов в коллекции. Это поможет удобнее организовать свое рабочее пространство, создавать тестовую документацию и
тесты для API. Для открытия коллекций вам нужно нажать на вкладку Collections, расположенную в боковом меню

Создание коллекции

Для создания новой коллекции вам нужно перейти на вкладку Collections и нажать +.

Также можно создать коллекцию через верхнее меню. Для этого нужно выбрать New > Collection. Чтобы изменить название коллекции нажмите на иконку редактирования, рядом с
названием. Для добавления описания к коллекции выберите иконку документации в правом боковом меню, затем нажмите на иконку редактирования и введите текст описания.

Вкладка Authorization позволяет настроить авторизацию для запросов этой коллекции. На вкладке Pre-request Script настраиваются скрипты, запускаемые перед отправкой
запросов из этой коллекции на сервер. Вкладка Tests содержит тестовые скрипты для данной коллекции, которые запускаются после получения ответов от API. На вкладке
Variables вы сможете определить значения переменных, используемых внутри этой коллекции


5 способов добавление запросов в коллекцию:

1) Добавить новый запрос в пустую коллекцию. Для этого нужно выбрать коллекцию и нажать на Add a request.

2) Сохранить запрос в нужной коллекции. Для этого в окне запроса нужно нажать кнопку Save. В появившемся окне выбрать нужную коллекцию либо создать новую, нажав на New
   Collection, в нижней части окна. Затем нажать Save для сохранения.

3) Переместить запрос из другой коллекции. Для этого надо выбрать нужный запрос и перетащить в новую коллекцию. Либо после выбора запроса нажать кнопку Save As и
   выбрать нужную коллекцию в появившемся окне.

4) Для создания нового запроса сразу внутри нужной коллекции, необходимо нажать кнопку View more actions, рядом с именем коллекции. Затем выбрать Add Request.

5) Если вы хотите включить в коллекцию один из ранее созданных запросов, выберите вкладку History в нижней части бокового меню. Затем необходимо нажать на View more
   actions, рядом с именем нужного запроса. Затем выбрать Save Request и выбрать нужную коллекцию в появившемся окне.


Управление коллекцией

Для того чтобы открыть нужную коллекцию просто нажмите на ее имя в списке. Слева от имени коллекции в списке есть иконка со стрелкой. Если нажать на нее можно открыть
или скрыть содержимое коллекции. Нажатие на иконку звезды ★, справа от имени коллекции переместит ее в начало списка. В верхней части списка доступно окно сортировки
и поиска, для более удобного доступа к нужной коллекции. Чтобы удобнее расположить коллекции внутри списка, их можно перетаскивать. Тоже самое можно делать с запросами
и папками внутри коллекций.

Внутри коллекций можно создавать папки, для лучшей организации структуры. Для этого нажмите на иконку View more actions, а затем выберите Add folder. Для создания
дополнительных уровней вложенности внутри папок можно создавать подпапки аналогичным образом.

Для удаления коллекции нажмите на иконку View more actions, а затем выберите Delete.

Удаленную коллекцию можно восстановить. Для этого нажмите на иконку View more actions рядом с панелью поиска, а затем выберите Open trash. В появившемся окне рядом с
коллекцией, которую хотите восстановить, нажмите на иконку Restore. У восстановления удаленных коллекций есть несколько ограничений. Если у вас бесплатный аккаунт, вы
сможете восстановить только коллекции, которые были удалены в течении одного дня. Также вы не сможете восстановить большую коллекцию, размер которой превышает 30 MB.

В Postman есть возможности для совместной работы с коллекциями. Вы можете поделиться своей коллекцией с другими пользователями, отслеживать и откатывать сделанные в
коллекции изменения. Добавлять комментарии и делать ветвления.

3.2 Переменные в Postman

Переменные в Postman позволяют сохранить и повторно использовать различные значения. После создания переменной, её значение можно использовать в коллекциях,
окружениях, запросах или тестовых скриптах, ссылаясь с помощью имени этой переменной.

Для создания переменной нажмите на иконку Environment quick look, в правой верхней части экрана. В разделе Globals нажмите Add. Введите имя переменной, в столбце
Variable и начальное значение(Initial value). Затем нажмите кнопку Save.

Теперь мы можем использовать значение нашей переменной в одном из запросов. Откроем его из истории запросов. Значение параметра name теперь можно заменить ссылкой на
переменную name в двойных фигурных скобках. Теперь если навести на имя переменной появится всплывающая подсказка. В ней можно увидеть имя переменной, ее значения и
область видимости. Нажав на кнопку Send, вы можете убедиться, что запрос работает так же, как и прежде.


Назначение переменных

Переменные в Postman - это пары ключ-значение. Имя переменной является ключом, по которому мы к ней обращаемся для получения доступа к ее значению. Также с помощью
переменных можно передавать значения между запросами и тестами.

Таким образом в переменной мы можем хранить какие-либо данные. Для доступа к ним используется имя переменной. Добавление переменных бывает полезно, когда нужно
использовать одинаковые данные в нескольких местах. Они сделают ваши запросы более читабельными и гибкими, поскольку теперь вы можете задавать нужные данные в одном
месте.

В переменных можно хранить не только параметры, но и например часть URL. Например в разных запросах может быть одинаковая или повторяющаяся часть адреса. Также может
быть часть адреса, которая изменится в будущем. Ее удобно вынести в переменную, чтобы затем производить изменения только в одном месте. 

При использовании нескольких тестовых окружений, удобно выносить в переменные базовую часть url, поскольку она будет отличаться. Удобно будет задавать значение
переменной, отдельно для каждого из окружений.

