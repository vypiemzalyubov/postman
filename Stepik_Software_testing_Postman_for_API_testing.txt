1  Быстрый старт с Postman

1.1 Что такое Postman?

Основное назначение Postman - облегчить разработку, тестирование и документирование API. С его помощью можно отправить данные в запросе и проверить полученный ответ.
Также у него есть много других интересных возможностей. Можно например сохранять запросы в папки и коллекции, удобно параметризовывать запросы. Запускать коллекции с
помощью Collection Runner и использовать их как автоматизированные тесты. Postman позволяет проектировать дизайн API и создавать на его основе Mock-сервер.

Тестировщики, с помощью Postman могут отправлять HTTP/HTTPS запросы к сервисам и получать ответы от них. С помощью такого подхода можно протестировать бэкенд сервисы и
убедиться, что они работают корректно. С помощью Postman можно выполнять запросы к различным API, таким как REST, SOAP и GraphQL.

Postman - это сейчас достаточно популярный инструмент, который использует в работе много людей. У него есть большое сообщество, в котором в случае необходимости можно
будет найти ответы на появившиеся вопросы.

1.2 Установка

Для установки под Windows:  

  - Загрузите последнюю версию Postman.
  - Запустите .exe файл для установки.
  - После окончания процесса установки потребуется зарегистрироваться. Для простоты можно выбрать вариант регистрации с помощью существующего google аккаунта.

Также у Postman есть web версия, которая работает прямо в браузере. Она доступна по этой ссылке. На данный момент эта версия находится в процессе доработок, поэтому
часть возможностей настольной версии там недоступна

1.3 Основные элементы интерфейса Postman

Окно приложения состоит из верхнего, нижнего  и бокового меню, а также основной зоны работы.

Верхнее меню дает возможность создания рабочего пространства (Workspaces) и доступа к различным api (API Network). Также с его помощью можно делать поиск.
Home - содержит вашу домашнюю страницу. На ней можно посмотреть вашу недавнюю активность.
С помощью Workspaces - можно создать новое рабочее пространство, выбрать одно из недавно посещенных, либо сделать поиск по существующим.

В боковом меню доступны основные функциональные элементы Postman. В истории (History) вы можете увидеть сделанные ранее запросы. Для более удобного хранения,
группировки и поиска таких запросов в Postman есть коллекции (Collections). Если у вас небольшой экран, для удобной работы можно свернуть боковое меню с помощью кнопки
в нижнем левом углу.

Большая часть вашей работы в Postman будет проходить в основной рабочей зоне. Основные её части - вкладки, выпадающий список для выбора окружения и правое боковое
меню. Вкладки нам нужны, для лучшей организации работы с запросами. Здесь Postman сделан по тому же принципу, что и браузеры, где новую странице удобнее открывать в
новой вкладке

1.4 Ручное тестирование api с Postman. Отправка первого запроса

Основная функциональность Postman - возможность создания и отправки запросов к API для проверки его функциональности и получения данных. Для этого не потребуется
писать код или команды в терминале. В интерфейсе Postman вы создаете запрос, нажимаете кнопку отправить и получаете ответ от API. API расшифровывается как Application
Programming Interface или программный интерфейс приложения. С его помощью мы можем  получить доступ к возможностям другого приложения и обмениваться с ним данными.
Такое приложение называется API сервером. Отправка запросов и получение ответов происходит через интернет с помощью протокола HTTP. Приложение, которое отправляет
запрос, называется клиентом. Это может быть мобильное приложение, web сайт или другой сервис.

Запрос всегда содержит URL вызываемого эндпоинта API и HTTP метод запроса. Наиболее часто используются следующие методы:

POST - для добавления новых данных
GET - для чтения данных
PUT - для обновления данных
PATCH - для частичного обновления данных
DELETE - для удаления данных

Как будет выглядеть GET запрос из демонстрационного API Postman:  GET https://postman-echo.com/get

Для отправки в Postman выбираем метод GET. Копируем адрес нашего эндпоинта и нажимаем кнопку Send. В результате получаем ответ содержащий данные в виде json объекта.

В ответе мы можем увидеть тело ответа (Body), который мы получили от сервера. Postman автоматически распознает формат JSON и форматирует его, для лучшего восприятия.
Помимо Body, мы можем посмотреть куки (Cookies) и заголовки (Headers) ответа, нажав на соответствующие ссылки. Также мы видим, что наш запрос выполнился успешно и в
ответе мы получили код ответа 200 OK. На выполнение запроса ушло 148мс



2  Работа с запросами и ответами в Postman

2.1 Основные запросы

Запрос может содержать различную информацию, которая определяет какие данные Postman отправит при взаимодействии с API. Обязательно нужно указать метод запроса и его
URL. С их помощью определяется API эндпоинт, с которым Postman будет взаимодействовать. Для начала давайте попробуем отправить пять основных типов запросов.

Создадим новый запрос, для этого можно в верхнем меню выбрать New > HTTP Request, либо нажать + и создать новую вкладку.

GET запрос. Обычно такой тип запросов используется для чтения данных.

GET https://postman-echo.com/get

Метод GET у нас уже выбран по умолчанию. Осталось указать URL нашего API. После того, как мы начнем вводить его, Postman в выпадающем списке покажет нам ранее
введенные адреса. В данном примере наш url состоит из двух частей. 

Первая из них базовый(base) url - это https://postman-echo.com. Она состоит из протокола https. Здесь чаще всего будет использоваться либо https, либо http протокол.
Затем идёт host, представленный доменным именем postman-echo.com. Вместо него также может быть использован ip адрес хоста. И затем идет неявно указанный порт, в нашем
случае это 443. Если используется протокол http, порт по умолчанию будет 80. Если порт отличается от используемых по умолчанию, потребуется явно указать его через
двоеточие. 

Вторая часть это путь(path) запроса. Он находится сразу после base url.

После ввода URL мы можем отправить запрос. Для этого нужно нажать кнопку Send. Через некоторое время после этого в нижней части главного окна мы увидим ответ от
сервера

Запрос с path параметрами

Это параметры которые являются частью пути запроса. В документации к api такие параметры часто задаются в фигурных скобках. В Postman для добавления такого параметра в
запрос, нужно указать двоеточие перед его именем.

GET https://postman-echo.com/delay/:delay

После этого на вкладке Params, в таблице path параметров можно будет задать его значение

POST запрос с query параметрами

POST запрос. Такой тип запросов обычно используется чтобы добавить данные.

POST https://postman-echo.com/post?name=anna

Для его отправки надо выбрать соответствующий тип в выпадающем списке, слева от url адреса. Еще в отличии от предыдущего, этот запрос содержит параметры строки запроса
или query параметры. От основной части url они отделяются знаком вопроса, а между собой знаком амперсанда.

Если ввести такой параметр в строке запроса, он автоматически появится на вкладке Params. Если добавить его на вкладке, тогда он появится в строке запроса. Еще на этой
вкладке у каждого параметра есть поле description. В нем можно добавить описание к каждому из указанных параметров. Для краткости столбцы value и description можно
скрыть. Для этого нужно нажать кнопку View more actions и выбрать только нужные поля. 

Есть еще один способ ввода параметров - Bulk Edit. Он удобен, если вам требуется указать большое количество параметров. Для его использования нужно нажать
соответствующую кнопку. В открывшемся окне можно вводить параметры. Каждый параметр вводится в новой строке. Имя и значение параметра разделяются двоеточием. Например
ранее введенный нами параметр будет выглядеть таким образом: name:anna

2.2 Передача параметров в теле запроса

Иногда в запросе может потребоваться отправить больший объем данных чем пара ключ и значение. Например вы хотите добавить нового пользователя. Информация о нем
представлена в виде XML или Json. Будет не очень удобно передавать ее в виде path или query параметров. Для таких случаев используется передача параметров в теле
запроса. Обычно такой способ применяется с POST, PUT и PATCH запросами.

В Postman, на вкладке body вы можете задать нужные данные, которые будут отправлены вместе с запросом. Там же можно выбрать тип отправляемых данных. По умолчанию
Postman для тела запроса использует тип none.

Если вы планируете отправлять данные в теле запроса необходимо убедиться, что добавлен правильный заголовок content-type. Он нужен для того, чтобы api мог корректно
обработать полученный запрос.

Для типов form-data и x-www-form-urlencoded Postman автоматически добавит в заголовки нужный content-type. Если вы планируете использовать тип raw, Postman добавит
заголовок на основе выбранного вами типа (например json или text). Для типа binary Postman не будет добавлять никаких заголовков. Заданный вручную заголовок content
type переопределяет значение, указанное Postman

Форматы form-data, url-encoded и binary

Формат form-data. Он позволяет отправлять данные в формате пар ключ-значение. Используемый content-type, который Postman сам добавит в заголовки:
multipart/form-data, к которому динамически добавляется граница(boundary) генерируемая во время отправки запроса. Такой тип передачи данных часто используется при
отправки данных формы на сайтах. Еще с помощью формата form-data можно передавать файлы. Для этого в выпадающем меню нужно выбрать file и загрузить нужный нажав на
кнопку Select Files.

Формат x-www-form-urlencoded внешне очень похож на form-data. Здесь данные также передаются в формате ключ-значение, но отсутствует возможность передавать файлы.
Заголовок content-type, который Postman добавит автоматически будет иметь значение: application/x-www-form-urlencoded.

Формат binary. Он предназначен для отправки бинарных данных. Обычно к ним относятся различные файлы: картинки, аудио, видео и также текстовые файлы. Такие данные
тяжело вручную добавить в запрос, поэтому в Postman это делается с помощью диалога загрузки файла

PUT запрос и raw формат

PUT запрос. Такой тип запросов обычно используется для обновления данных.

PUT https://postman-echo.com/put

В теле запроса можно передавать текстовые данные, различных форматов. Для этого используется вариант передачи данных: raw. В выпадающем меню можно выбрать формат
передаваемых данных. Доступные форматы: Text, JavaScript, JSON, HTML и XML. 

Для данных в формате JSON и XML появляется кнопка Beautify. С ее помощью можно переформатировать текстовые данные для красивого отображения в окне ввода

PATCH запрос

PATCH запросы обычно используются для частичного обновления данных.

PATCH https://postman-echo.com/patch

Снова выберем вкладку raw. В зависимости от выбранного формата, Postman включит подсветку синтаксиса в окне ввода и добавит нужный заголовок content-type. Он будет
иметь следующие значения:

Text - text/plain
JavaScript - application/javascript
JSON - application/json
HTML - text/html
XML - application/xml

При необходимости вы сможете переопределить его на вкладке headers

DELETE запрос

DELETE запрос. Такой тип запросов как правило используется для удаления данных.

DELETE https://postman-echo.com/delete

Для его отправки надо выбрать соответствующий тип в выпадающем списке, слева от url адреса.

На вкладке Headers при необходимости можно добавить заголовки запроса. Сейчас там находится 8 заголовков, которые Postman добавил в запрос автоматически

2.3 Работа с ответами

В Postman есть возможность визуализации тела ответа, а также проверки его корректности. Основные части ответа - это код ответа, заголовки и тело ответа


Тело ответа

В Postman тело ответа мы можем посмотреть в нижней части главного экрана, на вкладке body. Она предоставляет несколько инструментов, которые помогут эффективнее
работать с ответами от api. Это 4 вида представления тела ответа: Pretty, Raw, Preview и Visualize. В первых двух доступна функция поиска в запросе. Для открытия окна
поиска нужно будет выбрать иконку поиска или нажать сочетание клавиш ⌘+F или Ctrl+F. В Postman доступен автоматический показ изображений в теле ответа, если он
содержит соответствующий заголовок content-type.

Форматированный(Pretty) вид - представление тела запроса для форматов JSON и XML. Этот вид автоматически форматирует полученный ответ для более легкого восприятия.
Применяется удобная подсветка различных частей текста.

Postman делает форматирование автоматически, на основе пришедшего заголовка content-type. Для принудительного изменения форматирования, можно воспользоваться
выпадающим списком для выбора иного формата, рядом с кнопкой Visualize.

Если вы работаете только с форматом Json, можно выставить принудительное форматирование в этом формате. Для этого в верхнем меню нужно выбрать раздел настроек
(Settings). На вкладке General найти настройку определения языка (Language detection). Затем поменять ее значение с Auto на Json.

Неформатированный (Raw) вид - текстовое представление тела запроса, без дополнительного форматирования. Позволяет просмотреть его в полученном виде.

Предпросмотр (Preview) - этот вид позволяет удобно просматривать полученное содержимое в обработанном виде. Это может быть удобно например в случае получения
стандартных ошибок, которые приходят в виде Html страницы.

Для бинарных типов данных в ответах, таких как аудио файлы, pdf документы, zip архивы или что-то другое вы можете воспользоваться кнопкой Send and download, чтобы
сохранить ответ и проверить его локально на своем компьютере.

Визуализация (Visualize) - позволяет обработать полученный ответ собственным способом. Код для визуализации добавляется отдельно.


Заголовки и cookies

На вкладке Cookies можно просмотреть все куки отправленные сервером. Каждая запись будет содержать имя, значение, домен и путь, а также дополнительную информацию.

На вкладке headers отображается информация о полученных заголовках, в формате ключ-значение. Если навести мышку на иконку информации, в поле с именем заголовка, можно
получить информацию о каждом из них, в соответствии со спецификацией протокола HTTP.

В случае отправки HEAD запроса, Postman откроет вкладку Headers по умолчанию, вместо вкладки Body.

Результаты тестов (Test results) расположенны на вкладке с таким же названием.


Информация об ответе

Postman также отображает сетевую информацию при получении запроса. Наведите мышку на иконку глобуса рядом со статус кодом.

Далее идет код ответа, который вернул API. Наведите курсор на сам код для получения описания того, что он означает.

Затем следует время и размер ответа. Postman автоматически посчитает время ответа от сервера в миллисекундах. Эта информация может быть полезна, при анализе причин
слишком долгих ответов. При наведении курсора на число, отображается разбиение этого времени по различным фазам ответа.

Далее Postman отображает примерный размер ответа. При наведении на число можно увидеть размер тела запроса и заголовков.

Еще в Postman есть функция сохранения ответов от сервера. Если запрос был сохранен в коллекцию, вы также можете сохранить и ответ для него. Для этого выберите Save
Response, затем Save as example. Либо сохраните ответ в файл, выбрав Save to a file



3 Коллекции и переменные в Postman

3.1 Создание коллекции и добавление запросов

В Postman вы можете группировать запросы и примеры ответов в коллекции. Это поможет удобнее организовать свое рабочее пространство, создавать тестовую документацию и
тесты для API. Для открытия коллекций вам нужно нажать на вкладку Collections, расположенную в боковом меню

Создание коллекции

Для создания новой коллекции вам нужно перейти на вкладку Collections и нажать +.

Также можно создать коллекцию через верхнее меню. Для этого нужно выбрать New > Collection. Чтобы изменить название коллекции нажмите на иконку редактирования, рядом с
названием. Для добавления описания к коллекции выберите иконку документации в правом боковом меню, затем нажмите на иконку редактирования и введите текст описания.

Вкладка Authorization позволяет настроить авторизацию для запросов этой коллекции. На вкладке Pre-request Script настраиваются скрипты, запускаемые перед отправкой
запросов из этой коллекции на сервер. Вкладка Tests содержит тестовые скрипты для данной коллекции, которые запускаются после получения ответов от API. На вкладке
Variables вы сможете определить значения переменных, используемых внутри этой коллекции


5 способов добавление запросов в коллекцию:

1) Добавить новый запрос в пустую коллекцию. Для этого нужно выбрать коллекцию и нажать на Add a request.

2) Сохранить запрос в нужной коллекции. Для этого в окне запроса нужно нажать кнопку Save. В появившемся окне выбрать нужную коллекцию либо создать новую, нажав на New
   Collection, в нижней части окна. Затем нажать Save для сохранения.

3) Переместить запрос из другой коллекции. Для этого надо выбрать нужный запрос и перетащить в новую коллекцию. Либо после выбора запроса нажать кнопку Save As и
   выбрать нужную коллекцию в появившемся окне.

4) Для создания нового запроса сразу внутри нужной коллекции, необходимо нажать кнопку View more actions, рядом с именем коллекции. Затем выбрать Add Request.

5) Если вы хотите включить в коллекцию один из ранее созданных запросов, выберите вкладку History в нижней части бокового меню. Затем необходимо нажать на View more
   actions, рядом с именем нужного запроса. Затем выбрать Save Request и выбрать нужную коллекцию в появившемся окне.


Управление коллекцией

Для того чтобы открыть нужную коллекцию просто нажмите на ее имя в списке. Слева от имени коллекции в списке есть иконка со стрелкой. Если нажать на нее можно открыть
или скрыть содержимое коллекции. Нажатие на иконку звезды ★, справа от имени коллекции переместит ее в начало списка. В верхней части списка доступно окно сортировки
и поиска, для более удобного доступа к нужной коллекции. Чтобы удобнее расположить коллекции внутри списка, их можно перетаскивать. Тоже самое можно делать с запросами
и папками внутри коллекций.

Внутри коллекций можно создавать папки, для лучшей организации структуры. Для этого нажмите на иконку View more actions, а затем выберите Add folder. Для создания
дополнительных уровней вложенности внутри папок можно создавать подпапки аналогичным образом.

Для удаления коллекции нажмите на иконку View more actions, а затем выберите Delete.

Удаленную коллекцию можно восстановить. Для этого нажмите на иконку View more actions рядом с панелью поиска, а затем выберите Open trash. В появившемся окне рядом с
коллекцией, которую хотите восстановить, нажмите на иконку Restore. У восстановления удаленных коллекций есть несколько ограничений. Если у вас бесплатный аккаунт, вы
сможете восстановить только коллекции, которые были удалены в течении одного дня. Также вы не сможете восстановить большую коллекцию, размер которой превышает 30 MB.

В Postman есть возможности для совместной работы с коллекциями. Вы можете поделиться своей коллекцией с другими пользователями, отслеживать и откатывать сделанные в
коллекции изменения. Добавлять комментарии и делать ветвления.

3.2 Переменные в Postman

Переменные в Postman позволяют сохранить и повторно использовать различные значения. После создания переменной, её значение можно использовать в коллекциях,
окружениях, запросах или тестовых скриптах, ссылаясь с помощью имени этой переменной.

Для создания переменной нажмите на иконку Environment quick look, в правой верхней части экрана. В разделе Globals нажмите Add. Введите имя переменной, в столбце
Variable и начальное значение(Initial value). Затем нажмите кнопку Save.

Теперь мы можем использовать значение нашей переменной в одном из запросов. Откроем его из истории запросов. Значение параметра name теперь можно заменить ссылкой на
переменную name в двойных фигурных скобках. Теперь если навести на имя переменной появится всплывающая подсказка. В ней можно увидеть имя переменной, ее значения и
область видимости. Нажав на кнопку Send, вы можете убедиться, что запрос работает так же, как и прежде.


Назначение переменных

Переменные в Postman - это пары ключ-значение. Имя переменной является ключом, по которому мы к ней обращаемся для получения доступа к ее значению. Также с помощью
переменных можно передавать значения между запросами и тестами.

Таким образом в переменной мы можем хранить какие-либо данные. Для доступа к ним используется имя переменной. Добавление переменных бывает полезно, когда нужно
использовать одинаковые данные в нескольких местах. Они сделают ваши запросы более читабельными и гибкими, поскольку теперь вы можете задавать нужные данные в одном
месте.

В переменных можно хранить не только параметры, но и например часть URL. Например в разных запросах может быть одинаковая или повторяющаяся часть адреса. Также может
быть часть адреса, которая изменится в будущем. Ее удобно вынести в переменную, чтобы затем производить изменения только в одном месте. 

При использовании нескольких тестовых окружений, удобно выносить в переменные базовую часть url, поскольку она будет отличаться. Удобно будет задавать значение
переменной, отдельно для каждого из окружений.


Область видимости переменных

Переменные в Postman имеют различную область видимости. Это может быть полезно в зависимости от решаемых задач.

Всего есть 5 областей видимости: глобальные переменные, переменные коллекции, переменные окружения, переменные уровня данных и локальные переменные.

1) Глобальные переменные позволяют получить доступ к данным между различными коллекциями, запросами, тестовыми скриптами и окружениями. Глобальные переменные доступны
   внутри всего рабочего пространства. Они имеют самую широкую область видимости из возможных в Postman.

2) Переменные коллекции доступны для всех запросов внутри коллекции. Они не зависят от окружения, их значения не меняются в зависимости от выбранного окружения. Такой
   тип переменных удобен, если вы используете только одно окружение.

3) Переменные окружения позволяют организовать область видимости для работы с различными окружениями. Например у вас может быть стенд для разработки и отдельный
   тестовый стенд. В разные моменты времени, каждый из них будет активным. Если у вас только одно окружение, эффективнее будет использовать переменные коллекций.

4) Переменные уровня данных заполняются из внешних файлов, например csv или json. С их помощью определяются наборы данных, которые затем можно использовать в тестовых
   прогонах. Они будут использованы только в качестве текущих значений, и не сохранятся за пределами прогонов коллекции или отдельных запросов.

5) Локальные переменные имеют самую узкую область видимости. Это временные переменные, значения которых относятся лишь к текущему запуску запроса или коллекции. Они
   перестанут быть доступны после его завершения. Также локальные переменные подойдут, если вы хотите переопределить переменные с более широкой видимостью, без
   сохранения значения в переменной, после окончания выполнения запроса.

Если у вас есть переменные с одинаковым именем в двух разных областях видимости, будет использована переменная с самой узкой областью видимости. Если например у вас
есть переменные name среди глобальных и локальных переменных, тогда при запуске запроса будет использована локальная переменная.

Postman сохраняет все переменные в виде строк. При работе с объектами и массивами, не забудьте перед сохранением вызвать JSON.stringify(), а перед получением нужно
будет вызвать JSON.parse().


Типы переменных

Для глобальных переменных и переменных окружения можно указать один из двух типов. Первый из них - это тип по умолчанию. Значения переменных этого типа отображаются,
как обычный текст. Второй тип - секретный, нужен для сокрытия значений. Обычно он используется для сокрытия чувствительных данных, таких как пароли, ключи и токены.
Для изменения типа переменной пользователь должен обладать правами на редактирования для рабочего пространства(для глобальных переменных) или окружения(для переменных
окружения).

Для установки секретного типа у переменных нажмите на иконку Environment quick look, в правой верхней части экрана. В разделе Globals нажмите Add. Введите имя
переменной, в столбце Variable и начальное значение(Initial value). В столбце Type измените тип на Secret. Затем нажмите кнопку Save.

Для изменения типа переменной с секретного на тип по умолчанию, вам потребуются права на редактирование. Во время смены типа вам потребуется подтвердить изменение. Для
этого в появившемся окне нажмите на кнопку Change type.

Просматривать значения секретных переменных могут все пользователи. Для этого нужно нажать на иконку с глазом, справа от значения переменной. Менять начальные значения
таких переменных могут только пользователи с правами на редактирование. Для изменения значения, нужно также сначала нажать на иконку с изображением глаза, а затем
редактировать значение.


Инициализация переменных

Добавление из строки запроса. Для этого нужно выделить значение переменной. Во всплывающем контекстном меню можно выбрать одну из существующих переменных. Для
добавления новой переменной необходимо выбрать Set as variable.

Затем нужно выбрать Set as a new variable. В поле name добавить имя переменной. Если нужно, вы можете поменять значение в поле Value. Область видимости выбирается в
поле Scope. Для завершения нажмите Set variable.

Существующим переменным можно задавать значения из тела ответа сервера. Для этого нужно выделить нужное значение. Затем нажать правую кнопку мыши. В появившемся меню
выбрать подходящие область видимости и имя переменной.

Для добавления переменной в коллекцию, выберите вкладку Collections в левом боковом меню. Кликните на имя нужной коллекции. Перейдите на вкладку Variables. Далее всё
аналогично добавлению других переменных.

В Postman есть динамические переменные, которые иногда бывает полезно использовать в своих запросах. Вот несколько примеров таких переменных:

{{$randomPassword}} : Случайный пароль из 15 символов.

{{$timestamp}}: Текущее время в секундах.

{{$randomInt}}: Случайное целочисленное значение в промежутке между 0 и 1000.

  Пример: Переменная с именем param определена на трех уровнях. Она имеет следующие значения:

          На уровне окружения local, переменная param = env.
          Глобальная переменная param = global.
          На уровне коллекции, переменная param = collection.
          Внутри коллекции мы создали новый запрос : https://postman-echo.com/get?param={{param}}
          
          С каким значением параметра param выполнится запрос, если у нас выбрано окружение local?
          
  Ответ:  env
  
  Пример: Переменная с именем param определена на трех уровнях. Она имеет следующие значения:

          На уровне окружения local, переменная param = env.
          Глобальная переменная param = global.
          На уровне коллекции, переменная param = collection.
          Внутри коллекции мы создали новый запрос : https://postman-echo.com/get?param={{param}}
          
          С каким значением выполнится запрос, если у нас не выбрано окружение?
          
  Ответ:  collection
  
3.3 Окружение

В Postman окружение представляет собой набор переменных. Вы можете использовать их для группировки значений и управления доступа к ним, если используете Postman всей
командой. Активное окружение отображается в правом верхнем углу, рядом с иконкой  Environment quick look. Там же вы можете поменять его, выбрав нужное окружение в
выпадающем списке.

Для просмотра всех окружений выберите вкладку Environments в левом боковом меню. Здесь также можно сделать окружение активным или неактивным. Для этого нужно нажать на
иконку, справа от имени нужного окружения. Чтобы открыть окружение в редакторе, нажмите на его имя в списке.

Для создания нового окружения на вкладке Environments нажмите на + в верхней части списка окружений. Затем введите имя окружения. Если будете добавлять переменные
окружения, не забудьте нажать кнопку Save.


Переменные окружения

Чтобы посмотреть переменные окружения, в левом боковом меню выберите вкладку Environments. Затем кликните на имя нужного окружения. То же самое можно сделать с помощью
иконки Environment quick look, в правой верхней части экрана.

Для создания переменной окружения, после выбора окружения введите имя переменной, в столбце Variable и начальное значение(Initial value). Укажите тип переменной и
нажмите кнопку Save. Редактирование значений делается аналогично другим типам переменных.

Для остальных операций с окружением, нужно нажать на иконку View more actions, справа от имени окружения. Здесь можно удалить или переименовать окружение. Создать его
копию, переместить его, а также дать доступ другим членам команды.

Итог: Коллекции - позволяют группировать различные запросы
      Переменные - позволяют хранить и повторно использовать различные значения
      Окружения - представляют собой набор переменных
      


4 Скрипты для автоматизации тестирования в Postman

4.1 Основные виды скриптов в Postman

Postman позволяет нам добавлять дополнительную логику к запросам и коллекциям. Это дает возможность писать API тесты и создавать запросы, содержащие динамические
параметры и передавать данные между запросами. Для этого есть два способа, добавления кода JavaScript. 

Можно добавить скрипт перед отправкой запроса на сервер. Это делается на вкладке Pre-request Script. Второй способ - добавление скрипта, который будет выполнен после
получения ответа от сервера. Его можно добавить на вкладке Tests.

Оба типа скриптов можно добавлять к отдельным запросам, а также к папкам и коллекциям, в которых они находятся.


Порядок запуска

Порядок запуска скрипта в Postman выглядит следующим образом:

До выполнения запроса выполняются pre-request скрипты. Сначала те, что были определены на уровне коллекции, затем определенные на уровне папки и потом заданные в самом
запросе. После этого выполняется запрос и мы получаем для него ответ от сервера. После этого выполняются тестовые скрипты заданные на уровне коллекции, потом
определенные для папки и самым последним будет выполнен скрипт, который был определен для запроса.

Запуск pre-request скрипта -> Отправка запроса -> Получение ответа -> Запуск тестового скрипта

Pre-request скрипт на уровне коллекции -> Pre-request скрипт на уровне папки -> Pre-request скрипт на уровне запроса -> 
Тестовый скрипт на уровне коллекции -> Тестовый скрипт на уровне папки -> Тестовый скрипт на уровне запроса


4.2 Скрипты перед запросом

Как уже было сказано ранее скрипты, запускаемые перед запросом, можно добавить на вкладке Pre-request Script на уровне коллекции, скрипта или запроса. Обычно они
используются для предварительной обработки запроса перед отправкой на сервер. Это может быть установка значений переменных, параметров, заголовков или тела запроса.
Также вы можете выводить в консоль, дополнительную информацию для отладки скриптов.

Для примера представьте, что у вас есть коллекция запросов. Вы запускаете их последовательно. Первый запрос возвращает значение, которое затем нужно передать во второй
запрос, но перед его отправкой, нужно сначала обработать это значение. В данном случае, после выполнения первого запроса в тестовых скриптах мы сохраним полученное
значение в переменной, которая будет доступна также и второму запросу. В pre-request скриптах второго запроса, получим значение из переменной, обработаем его и снова
сохраним в этой переменной. Затем во втором запросе используем уже обработанное значение при отправке запроса.

Скрипт, реализующий такую логику:

1) Создадим новую коллекцию. Назовем ее Scripts demo.
   Добавим переменную уровня коллекции с именем ‘param’ и значением ‘default’.
   Добавим в коллекцию POST запрос:  POST https://postman-echo.com/post?name=anna
   У него откроем вкладку Tests. На ней добавим код, который сохранит значение параметра из тела ответа в переменную param. Этот код выполнится после получения ответа
   от сервера: 
   pm.collectionVariables.set("param", JSON.parse(responseBody).args.name)
   
   где:  pm.collectionVariables.set - установка значения переменной коллекции.
         "param" - имя этой переменной
         JSON.parse(responseBody) - получаем тело ответа в формате JSON
         args.name - получаем из этого JSON значение из этого элемента. Оно затем устанавливается в переменную коллекции.

2) Добавим в коллекцию GET запрос:  GET https://postman-echo.com/get?param={{param}}
   На вкладке Pre-request script у него добавим такой код. Он выполняет преобразование значения и снова сохраняет его в переменную:
   var paramValue = pm.collectionVariables.get("param")
   pm.collectionVariables.set("param", paramValue + "_pre_req")

3) Запустим всю коллекцию, нажав на Run. Откроем Postman console, для этого в верхнем меню нужно выбрать View > Show Postman Console.

Мы увидим, что второй запрос выполнился с параметром, равным ‘anna_pre_req’. Первую часть мы взяли из POST запроса, а вторую добавили в скрипте предшествующем отправке
GET запроса.

Если вы хотите, чтобы скрипт запускался перед каждым запросом в коллекции, его можно добавить на вкладке Pre-request script нужной коллекции. Тоже самое можно сделать
для папок внутри коллекции.

  Пример: У нас есть глобальная переменная param = global. Будем использовать ее в запросе:
          https://postman-echo.com/get?name={{param}}
          
          У запроса на вкладке pre-request script добавим такой код:
          pm.variables.set("param", "other");
          
          После нажатия на кнопку Send, с каким значением параметра name будет выполнен запрос?
          
  Ответ:  other
          перед отправкой запроса значение переменной меняется на other, в pre-request скрипте.
          Если бы код был на вкладке Tests, запрос отправился бы со значением global



4.3 Тестовые скрипты

Используя тестовые скрипты в Postman, вы можете проверить правильность работы API, сравнив результат с ожидаемым поведением или для отладки вывести какие либо значения
после получения ответа от сервера.

Тестовые скрипты, также как и скрипты выполняемые перед запросом, можно добавлять не только к отдельным запросам, но и к коллекциям или папкам. Также в Postman есть
готовые куски кода (code snippets) для стандартных задач, которые вы можете модифицировать под свои задачи.

Для добавления тестового скрипта к запросу вам потребуется открыть вкладку Tests и ввести туда свой код. Он будет запущен после выполнения запроса. Результат запуска
тестовых скриптов будет доступен на вкладке Test Results ответа от сервера. В тестовых скриптах можно использовать динамические переменные. Добавлять проверки для
данных из ответа и передавать полученные значения между запросами.


Проверка ответа

В Postman есть несколько готовых сущностей, облегчающих проверку ответа:

1) Для проверки данных, полученных в ответе мы можем использовать в скрипте pm.response. 
2) Создать тесты можно с помощью функции pm.test. Первый параметр - это строка, которая будет отображена в результатах выполнения теста. Во втором параметре передается
   функция, которая возвращает true или false. При значение true, тест отмечается как успешно выполненный. При значении false тест считается упавшим с ошибкой. 
3) Еще один способ добавления проверки в скрипт - pm.expect.

Давайте создадим новый тестовый скрипт и добавим в него несколько проверок для полученного ответа. Проверки будем делать для запроса:

GET https://postman-echo.com/delay/:delay

Добавим в коллекцию новую переменную delay и зададим ей значение 2. Будем использовать ее в качестве path параметра для нашего запроса. Откроем вкладку Tests. Добавим
следующий код:

pm.test("Check status", function() {
    pm.response.to.have.status(200)
});

pm.test("Check delay", function() {
    pm.expect(pm.response.json().delay).to.equal(pm.collectionVariables.get("delay"));    
});

В первом вызове pm.test, мы проверяем что код ответа равен 200. Во втором проверяем, что в теле ответа значение delay, совпадает со значением переменной коллекции,
которую мы использовали при отправке запроса. Давайте нажмем кнопку Send и выполним наш запрос. Затем откроем вкладку Test Results.

Возле названия вкладки мы видим количество тестов прошедших успешно, а также общее количество тестов. На самой вкладке мы видим результат выполнения тестов. Также
доступны фильтры, для показа : всех тестов, а также только успешных, только упавших и только пропущенных.

Postman содержит набор готовых сниппетов, для часто встречающихся задач. Они находятся справа от редактора тестовых скриптов.
 
Среди них есть например получение, установка и очистка значений переменных, проверка кода, заголовков и тела ответа и другие часто используемые проверки. Для
использования, просто нажмите на название нужного сниппета и он появится в редакторе. Вам останется лишь модифицировать его под свой случай использования.
Использование сниппетов ускорит ваш процесс написания тестовых скриптов.


Скрипты для коллекций и папок

Тестовые скрипты можно добавлять не только к отдельным запросам, но и на уровне папок и коллекций. Скрипт добавленный для коллекции, будет запущен после выполнения
каждого запроса, из этой коллекции. Скрипт добавленный на уровне папки, будет запущен после каждого запроса, находящегося в этой папке. Такой механизм позволяет удобно
организовать часто используемые скрипты. Порядок запуска  такой: сначала запускаются скрипты определенные на уровне коллекции, затем объявленные на уровне папки и
последними будут выполнены скрипты, заданные на уровне запроса.

Чтобы добавлять или редактировать скрипты для коллекции, нужно выбрать нужную коллекцию и перейти на вкладку Tests. Для папки все аналогично.

Создадим новую коллекцию, назовем ее Postman Demo. В ней создадим новую папку, с именем Folder Demo. Внутри папки добавим два запроса:

GET https://postman-echo.com/get?name={{name}}
POST https://postman-echo.com/post?name={{name}}

На уровне коллекции добавим переменную name со значением anna и переменную delay, значение которой будет равно 2. Внутри коллекции добавим еще один запрос:

GET https://postman-echo.com/delay/:delay

Параметр delay будет задаваться из переменной коллекции с таким же именем.

Теперь давайте добавим скрипт на уровне последнего GET запроса:

pm.test("Check delay", function() {
    pm.expect(pm.response.json().delay).to.equal(pm.collectionVariables.get("delay"));    
});

Еще один тестовый скрипт будет на уровне папки. Он будет запущен только для двух запросов, которые находятся в этой папке:

pm.test("Check name", function() {
    pm.expect(pm.response.json().args.name).to.equal("anna");    
});

Последний тестовый скрипт добавим на уровне коллекции. Он будет запущен для всех трех запросов:

pm.test("Check status", function() {
    pm.response.to.have.status(200)
});

Запустим всю коллекцию.

Для каждого из запросов видим запуски тестовых скриптов. Для первого и второго запросов, находящихся в папке Folder Demo, сначала выполнились тестовые скрипты,
заданные на уровне коллекции, затем на уровне папки. Третий скрипт не находится в папке, поэтому для него выполнился скрипт уровня коллекции и скрипт, который мы
задавали для самого запроса.

  Пример: У нас есть глобальная переменная param = global. Будем использовать ее в запросе:
          https://postman-echo.com/get?name={{param}}
          
          У запроса на вкладке test script добавим такой код:
          pm.variables.set("param", "test");
          
          После нажатия на кнопку Send, с каким значением параметра name будет выполнен запрос?
  
  Ответ:  global



5 Возможности скриптов в Postman

5.1 Переменные при тестировании API в Postman

Давайте подробнее рассмотрим способы работы с различными переменными в скриптах. Для этого нам потребуется создать новую коллекцию. Назовем ее Lesson_5.
Создадим окружение с именем Local. Добавим новую переменную count. Она будет иметь следующие значения:

Global: count = 20

Collection(Lesson_5): count = 10

Environment(Local): count = 5

Добавим в коллекцию новый запрос:

GET https://postman-echo.com/get?param={{count}}


Глобальные переменные

Для работы с переменными в скриптах чаще всего используются три функции: has, get и set. С помощью метода has мы проверяем существует ли такая переменная. Метод get
позволяет получить значение переменной. С помощью метода set можно задать значение переменной.

pm.globals.has("count");
Функция has(), принимает на вход один параметр. В нем содержится имя глобальной переменной. Возвращаемое значение имеет тип boolean. Если среди глобальных переменных,
есть переменная с таким именем, вернется значение true. Если такой переменной нет, вернется false.

console.log("Does count exist? : " + pm.globals.has("count"));
console.log("Does count2 exist? : " + pm.globals.has("count2"));
Если мы добавим к нашему запросу такой код и нажмём Send, в консоли мы увидим следующий вывод:

Does count exist? : true
Does count2 exist? : false
Т.к. мы добавили глобальную переменную count, вызов первой функции вернул нам true. Переменную с именем count2 мы не добавляли, поэтому второй вызов функции has вернул
нам false.

pm.globals.get("count");
Функция get(), принимает на вход один параметр. В нем содержится имя глобальной переменной. Функция вернет ее значение. Если такой переменной нет, вернется
‘undefined’.

pm.globals.set("count", 3);
Функция set(), принимает на вход два параметра. В первом передается имя глобальной переменной, во втором новое значение. Если такой переменной нет, она создается. 

pm.globals.unset("count");
Функция unset(), принимает на вход один параметр. В нем содержится имя глобальной переменной. После выполнения этой функции переменная с заданным именем будет удалена.

pm.globals.clear();
Если нам нужно удалить все переменные, можно вызвать функцию clear().

pm.globals.replaceIn("Global variable count = {{count}}.");
Используя функцию replaceIn(), можно вернуть строку с подставленными в нее значениями переменных.

Добавим к нашему запросу такой код:

console.log(pm.globals.replaceIn("Global variable count = {{count}}"));
console.log("Global variable count2 = " + pm.globals.get("count2"));

pm.globals.set("count", 3)
pm.globals.set("count2", 3)

console.log(pm.globals.replaceIn("Global variable count = {{count}}"));
console.log(pm.globals.replaceIn("Global variable count2 = {{count2}}"));

pm.globals.unset("count2")
console.log("Global variable count2 = " + pm.globals.get("count2"));

Сначала мы выводим значения переменных с именами count и count2. Затем устанавливаем им новые значения и затем уже их снова выводим в лог. После вызова функции unset()
переменная count2 снова будет иметь значение ‘undefined’. Нажмём кнопку Send. В консоли мы увидим следующий вывод:

Global variable count = 20
Global variable count2 = undefined

Global variable count = 3
Global variable count2 = 3

Global variable count2 = undefined
Сначала для переменной count выводится значение 20, которое было задано у нее. Для переменной count2, выводится undefined, т.к. такой переменной у нас не было. После
вызова функции set, создается переменная count2. Для нее устанавливается значение 3. Значение у переменной count изменяется на 3. В последних двух строках вывода мы
видим, что в консоль выводятся уже новые значения этих переменных.


Переменные коллекции, окружения и данных

Для переменных коллекции работа с переменными происходит таким же образом, только вместо globals мы теперь используем collectionVariables и работаем с переменными
текущей коллекции.

pm.collectionVariables.has("count");
pm.collectionVariables.get("count");
pm.collectionVariables.set("count", 3);
pm.collectionVariables.unset("count");
pm.collectionVariables.replaceIn("Count = {{count}}");
pm.collectionVariables.clear();

Аналогично для переменных выбранного окружения будут использоваться такие функции:

pm.environment.has("count");
pm.environment.get("count");
pm.environment.set("count", 3);
pm.environment.unset("count");
pm.environment.replaceIn("Count = {{count}}");
pm.environment.clear();
Для переменных уровня данных вызов аналогичных функций будет выглядеть таким образом:

pm.iterationData.has("count");
pm.iterationData.get("count");
pm.iterationData.unset("count");
Добавим к нашему запросу такой код:

console.log("(Global) count = " + pm.globals.get("count"))
console.log("(Collection) count = " + pm.collectionVariables.get("count"))
console.log("(Environment) count = " + pm.environment.get("count"))
В первой строке кода мы выводим значение глобальной переменной count. Затем выводим значение переменной заданной на уровне коллекции. В последней строке в вывод
попадет значение переменной из текущего окружения local.

(Global) count = 3 
(Collection) count = 10 
(Environment) count = 5

Вызвав наш запрос, в консоли мы увидим, что значение глобальной переменной равно 3. Переменная коллекции содержит значение 10, а переменная окружения 5.


Локальные переменные

Работа с локальными переменными происходит таким же образом, только теперь мы используем variables.

pm.variables.has("count")
pm.variables.get("count")
pm.variables.set("count", 3)

Область видимости локальной переменной ограничивается текущим запросом. 

console.log("(Local, before change) count = " + pm.variables.get("count"))
pm.variables.set("count", 18);
console.log("(Local, after change) count = " + pm.variables.get("count"))

Если мы поменяем значение локальной переменной, оно будет доступно только внутри текущего запроса. При следующем запуске, информация о нем исчезнет.

1й запуск:
(Local, before change) count = 5
(Local, after change) count = 18

2й запуск:
(Local, before change) count = 5
(Local, after change) count = 18

В начале второго запуска переменная count снова имеет значение 5.

  Пример: У нас есть переменная timer. В глобальных переменных она имеет значение равное 10. В коллекции Lesson_5 ее значение = 5. В окружении Local она имеет значение
          равное 2. В коллекции Lesson_5 есть запрос. На вкладке pre-request у него добавлен код:

          console.log(pm.variables.get("timer"));
          
          Если отправить запрос, выбрав в списке окружений "No Environment", что будет выведено в консоли?
          
  Ответ:  5
  
  Пример: У нас есть переменная count. В глобальных переменных она имеет значение равное 10. В коллекции Lesson_5 ее значение = 5. В окружении Local она не определена.
          В коллекции Lesson_5 есть запрос. На вкладке pre-request у него добавлен код:

          console.log(pm.environment.get("count"));

          Если отправить запрос, выбрав в списке окружений "Local", что будет выведено в консоли?
          
  Ответ:  undefined
  

5.2 Взаимодействие с запросом через pm.request
