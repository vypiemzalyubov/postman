{
	"info": {
		"_postman_id": "04520f5d-896a-4640-8df1-44c219dcecb6",
		"name": "Ksendzov_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20464288"
	},
	"item": [
		{
			"name": "Request_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let rightString = pm.response.text()\r",
							"\r",
							"pm.test(\"Right string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(rightString);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"// 7. Спарсить request.\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"    let name = jsonData.name;\r",
							"    pm.expect(name).to.eql('Dmitriy')\r",
							"});\r",
							"\r",
							"pm.test(\"Age\", function () {\r",
							"    let age = jsonData.age;\r",
							"    pm.expect(age).to.eql('31');\r",
							"});\r",
							"\r",
							"pm.test(\"Salary\", function () {\r",
							"    let salary = jsonData.salary;\r",
							"    pm.expect(salary).to.eql(3000);\r",
							"});\r",
							"\r",
							"let reqData = request.data;\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"    let name = jsonData.name;\r",
							"    pm.expect(name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Age\", function () {\r",
							"    let age = jsonData.age;\r",
							"    pm.expect(age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary\", function () {\r",
							"    let salary = String(jsonData.salary);\r",
							"    pm.expect(salary).to.eql(reqData.salary);\r",
							"});\r",
							"\r",
							"console.log(jsonData.family);\r",
							"\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqData.salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = JSON.parse(responseBody);\r",
							"\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"    let name = jsonData.name;\r",
							"    pm.expect(name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Age\", function () {\r",
							"    let age = jsonData.age;\r",
							"    pm.expect(age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary\", function () {\r",
							"    let salary = String(jsonData.salary);\r",
							"    pm.expect(salary).to.eql(reqData.salary);\r",
							"});\r",
							"\r",
							"console.log(jsonData.family);\r",
							"\r",
							"pm.test(\"Dog has a name\", function () {\r",
							"    let dog = jsonData.family.pets.dog;\r",
							"    pm.expect(dog).have.property('name');\r",
							"});\r",
							"\r",
							"pm.test(\"Dog has an age\", function () {\r",
							"    let dog = jsonData.family.pets.dog;\r",
							"    pm.expect(dog).have.property('age');\r",
							"});\r",
							"\r",
							"pm.test(\"Name is Luky\", function () {\r",
							"    let name = jsonData.family.pets.dog.name;\r",
							"    pm.expect(name).to.include('Luky');\r",
							"});\r",
							"\r",
							"pm.test(\"Age is 4\", function () {\r",
							"    let age = String(jsonData.family.pets.dog.age);\r",
							"    pm.expect(age).to.include(String('4'));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = JSON.parse(responseBody);\r",
							"\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"    let name = jsonData.name;\r",
							"    pm.expect(name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Age\", function () {\r",
							"    let age = String(jsonData.age);\r",
							"    pm.expect(age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"console.log(reqData.salary);\r",
							"\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"pm.test(\"Salary_0\", function () {\r",
							"    let salary_0 = Number(jsonData.salary[0]);\r",
							"    pm.expect(salary_0).to.eql(Number(reqData.salary));\r",
							"});\r",
							"\r",
							"pm.test(\"Salary_1 = Salary * 2\", function () {\r",
							"    let salary_1 = Number(jsonData.salary[1]);\r",
							"    pm.expect(salary_1).to.eql(Number(reqData.salary * 2));\r",
							"});\r",
							"\r",
							"pm.test(\"Salary_2 = Salary * 3\", function () {\r",
							"    let salary_2 = Number(jsonData.salary[2]);\r",
							"    pm.expect(salary_2).to.eql(Number(reqData.salary * 3));\r",
							"});\r",
							"\r",
							"pm.environment.set(\"name\");\r",
							"\r",
							"pm.environment.set(\"age\");\r",
							"\r",
							"pm.environment.set(\"salary\");\r",
							"\r",
							"pm.environment.set(\"name\", \"Dmitriy\");\r",
							"\r",
							"pm.environment.set(\"age\", \"31\");\r",
							"\r",
							"pm.environment.set(\"salary\", \"3000\");\r",
							"\r",
							"let i = jsonData.salary\r",
							"\r",
							"while (i < 2) {\r",
							"    console.log(i);\r",
							"    i++;\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"// 6. Спарсить response body в json.\r",
							"// 7. Спарсить request.\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"pm.environment.get(\"salary\");\r",
							"\r",
							"pm.environment.get(\"age\");\r",
							"\r",
							"pm.environment.get(\"name\");\r",
							"\r",
							"pm.sendRequest(\"http://162.55.220.72:5005/user_info_2\", function () {\r",
							"\tconsole.log('Hello!');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = JSON.parse(responseBody);\r",
							"\r",
							"let reqData = request.data;\r",
							"\r",
							"pm.test(\"Response has start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has qa_salary_after_3.5_year\", function () {\r",
							"    pm.expect(jsonData).have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has person\", function () {\r",
							"    pm.expect(jsonData).have.property('person');\r",
							"});\r",
							"\r",
							"pm.test(\"Start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(Number(reqData.salary));\r",
							"});\r",
							"\r",
							"pm.test(\"Salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqData.salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqData.salary * 2.7);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(reqData.salary * 3.3);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(reqData.salary * 3.8);\r",
							"});\r",
							"\r",
							"pm.test(\"Person_1_item = Salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(Number(reqData.salary));\r",
							"});\r",
							"\r",
							"pm.test(\"u_age = age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(Number(reqData.age));\r",
							"});\r",
							"\r",
							"pm.test(\"Salary_5_years = salary * 4.2\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(reqData.salary * 4.2);\r",
							"});\r",
							"\r",
							"let person = jsonData.person;\r",
							"for (i in person){\r",
							"\tconsole.log(person[i])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}